name: Deploy to AWS

on:
  push:
    branches:
      - "dev"
      - "master"
  pull_request:
    branches:
      - "dev"
      - "master"
      - "main"

env:
  AWS_REGION: ap-southeast-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
  SERVER_PUBLIC_IP: ${{ secrets.AWS_PUBLIC_KEY }}
  PORT: ${{ vars.PORT }}
  DATABASE_URL: ${{ vars.DATABASE_URL }}

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: beck-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy Docker Image on EC2 via SSH
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: beck-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-southeast-2
          PORT: ${{ env.PORT }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION,PORT,DATABASE_URL
          script: |
            sudo service docker start
            sudo chmod 666 /var/run/docker.sock
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REGISTRY
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true
            docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker run -d -p 3000:3000 \
              --env PORT=$PORT \
              --env DATABASE_URL=$DATABASE_URL \
              $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker container prune -f
            docker image prune -a -f
